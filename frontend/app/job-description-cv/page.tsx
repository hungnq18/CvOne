"use client";

import { useRouter, useSearchParams } from "next/navigation";
import { useState, useEffect } from "react";
import { ArrowLeft, ArrowRight } from "lucide-react";
import { useCV } from "@/providers/cv-provider";
import { analyzeJD, uploadAndAnalyzeCV } from "@/api/cvapi";

export default function JobDescriptionPage() {
  const router = useRouter();
  const { jobDescription, setJobDescription, pdfFile, updateUserData } = useCV();

  const searchParams = useSearchParams();
  const templateId = searchParams.get("id");

  // State for AI analysis
  const [analysisResult, setAnalysisResult] = useState<string>("");
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisError, setAnalysisError] = useState<string>("");
  const [isCreatingCV, setIsCreatingCV] = useState(false); // loading cho n√∫t T·∫°o CV

  const handleBack = () => {
    router.back();
  };

  // Logic chuy·ªÉn t·ª´ handleMyTemplateCreate
  const uint8ArrayToFile = (uint8Array: Uint8Array, fileName = "cv.pdf", mimeType = "application/pdf") => {
    const blob = new Blob([uint8Array], { type: mimeType });
    return new File([blob], fileName, { type: mimeType });
  };

  const handleContinue = async () => {
    if (!pdfFile) {
      alert("Vui l√≤ng t·∫£i l√™n file PDF tr∆∞·ªõc.");
      return;
    }

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (gi·ªõi h·∫°n 10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (pdfFile.length > maxSize) {
      alert("File PDF qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 10MB.");
      return;
    }

    setIsCreatingCV(true);
    try {
      const file = uint8ArrayToFile(pdfFile);
      const result = await uploadAndAnalyzeCV(file, jobDescription);
      const userData = result?.analysisResult?.userData;
      if (userData) {
        updateUserData(userData);
      }
      router.push(`/createCV-AIManual?id=${templateId}`);
    } catch (error) {
      if (error instanceof Error && error.message.includes('413')) {
        alert("File PDF qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 10MB ho·∫∑c n√©n file tr∆∞·ªõc khi t·∫£i l√™n.");
      } else {
        alert("C√≥ l·ªói khi ph√¢n t√≠ch CV b·∫±ng AI. Vui l√≤ng th·ª≠ l·∫°i.");
      }
      console.error(error);
    } finally {
      setIsCreatingCV(false);
    }
  };

  const formatAnalysisResult = (result: any): string => {
    try {
      // N·∫øu result l√† string, tr·∫£ v·ªÅ lu√¥n
      if (typeof result === 'string') {
        return result;
      }

      // N·∫øu c√≥ analysis field, s·ª≠ d·ª•ng n√≥
      if (result.analysis) {
        return result.analysis;
      }

      // N·∫øu c√≥ message field, s·ª≠ d·ª•ng n√≥
      if (result.message) {
        return result.message;
      }

      // X·ª≠ l√Ω JSON object v√† chuy·ªÉn th√†nh ƒëo·∫°n vƒÉn ti·∫øng Vi·ªát
      let analysis = "üìã **K·∫æT QU·∫¢ PH√ÇN T√çCH C√îNG VI·ªÜC**\n\n";

      // Th√¥ng tin v·ªÅ c·∫•p ƒë·ªô kinh nghi·ªám
      if (result.experienceLevel) {
        const levelMap: { [key: string]: string } = {
          'senior': 'C·∫•p cao (Senior)',
          'mid-level': 'C·∫•p trung (Mid-level)',
          'junior': 'C·∫•p c∆° s·ªü (Junior)',
          'entry-level': 'C·∫•p m·ªõi b·∫Øt ƒë·∫ßu (Entry-level)'
        };
        const level = levelMap[result.experienceLevel] || result.experienceLevel;
        analysis += `üéØ **C·∫•p ƒë·ªô kinh nghi·ªám:** ${level}\n\n`;
      }

      // K·ªπ nƒÉng y√™u c·∫ßu
      if (result.requiredSkills && result.requiredSkills.length > 0) {
        analysis += `üíº **K·ªπ nƒÉng y√™u c·∫ßu:**\n`;
        result.requiredSkills.forEach((skill: string, index: number) => {
          analysis += `   ${index + 1}. ${skill}\n`;
        });
        analysis += '\n';
      }

      // C√¥ng ngh·ªá s·ª≠ d·ª•ng
      if (result.technologies && result.technologies.length > 0) {
        analysis += `üõ†Ô∏è **C√¥ng ngh·ªá s·ª≠ d·ª•ng:**\n`;
        result.technologies.forEach((tech: string, index: number) => {
          analysis += `   ${index + 1}. ${tech}\n`;
        });
        analysis += '\n';
      }

      // Tr√°ch nhi·ªám ch√≠nh
      if (result.keyResponsibilities && result.keyResponsibilities.length > 0) {
        analysis += `üìù **Tr√°ch nhi·ªám ch√≠nh:**\n`;
        result.keyResponsibilities.forEach((resp: string, index: number) => {
          analysis += `   ${index + 1}. ${resp}\n`;
        });
        analysis += '\n';
      }

      // K·ªπ nƒÉng m·ªÅm
      if (result.softSkills && result.softSkills.length > 0) {
        analysis += `ü§ù **K·ªπ nƒÉng m·ªÅm:**\n`;
        result.softSkills.forEach((skill: string, index: number) => {
          analysis += `   ${index + 1}. ${skill}\n`;
        });
        analysis += '\n';
      }

      // Ng√†nh ngh·ªÅ
      if (result.industry) {
        analysis += `üè¢ **Ng√†nh ngh·ªÅ:** ${result.industry}\n\n`;
      }

      // Y√™u c·∫ßu h·ªçc v·∫•n
      if (result.education) {
        analysis += `üéì **Y√™u c·∫ßu h·ªçc v·∫•n:** ${result.education}\n\n`;
      }

      // Ch·ª©ng ch·ªâ (n·∫øu c√≥)
      if (result.certifications && result.certifications.length > 0) {
        analysis += `üèÜ **Ch·ª©ng ch·ªâ khuy·∫øn ngh·ªã:**\n`;
        result.certifications.forEach((cert: string, index: number) => {
          analysis += `   ${index + 1}. ${cert}\n`;
        });
        analysis += '\n';
      }

      // Th√™m g·ª£i √Ω t·ªïng quan
      analysis += `üí° **G·ª¢I √ù CHO CV:**\n`;
      analysis += `‚Ä¢ T·∫≠p trung v√†o c√°c k·ªπ nƒÉng v√† c√¥ng ngh·ªá ƒë∆∞·ª£c y√™u c·∫ßu\n`;
      analysis += `‚Ä¢ Nh·∫•n m·∫°nh kinh nghi·ªám ph√π h·ª£p v·ªõi c·∫•p ƒë·ªô ${result.experienceLevel || 'c√¥ng vi·ªác'}\n`;
      analysis += `‚Ä¢ ƒê∆∞a ra c√°c v√≠ d·ª• c·ª• th·ªÉ v·ªÅ tr√°ch nhi·ªám ƒë√£ th·ª±c hi·ªán\n`;
      analysis += `‚Ä¢ Th·ªÉ hi·ªán k·ªπ nƒÉng m·ªÅm th√¥ng qua c√°c d·ª± √°n nh√≥m\n`;

      return analysis;
    } catch (error) {
      console.error('Error formatting analysis result:', error);
      return JSON.stringify(result, null, 2);
    }
  };

  const handleAnalyzeAI = async () => {
    if (!jobDescription.trim()) {
      setAnalysisError("Vui l√≤ng nh·∫≠p m√¥ t·∫£ c√¥ng vi·ªác tr∆∞·ªõc khi ph√¢n t√≠ch");
      return;
    }

    setIsAnalyzing(true);
    setAnalysisError("");
    setAnalysisResult("");

    try {
      const result = await analyzeJD(jobDescription);
      const formattedResult = formatAnalysisResult(result);
      setAnalysisResult(formattedResult);
    } catch (error) {
      console.error("Error analyzing job description:", error);
      setAnalysisError("C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setIsAnalyzing(false);
    }
  };
  const maxLength = 5000;
  const currentLength = jobDescription.length;

  return (
    <div className="min-h-screen bg-white flex flex-col items-center justify-center py-12 px-4">
      <div className="w-full max-w-2xl space-y-8">
        {/* Main Content */}
        <div className="space-y-6">
          <div className="text-center">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              Th√™m m√¥ t·∫£ c√¥ng vi·ªác
            </h1>
          </div>

          <div className="space-y-2">
            <label
              htmlFor="jobDescription"
              className="block text-sm font-medium text-gray-700 uppercase tracking-wide"
            >
              M√î T·∫¢ C√îNG VI·ªÜC
            </label>
            <div className="relative">
              <textarea
                id="jobDescription"
                value={jobDescription}
                onChange={(e) => setJobDescription(e.target.value)}
                placeholder="Vi·∫øt m√¥ t·∫£ c√¥ng vi·ªác m√† nh√† tuy·ªÉn d·ª•ng y√™u c·∫ßu v√†o ƒë√¢y. B·∫°n c√≥ th·ªÉ ƒë·ªÉ tr·ªëng n·∫øu ch∆∞a c√≥ c√¥ng vi·ªác c·ª• th·ªÉ."
                maxLength={maxLength}
                rows={6}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg text-base focus:outline-none focus:border-blue-500 transition-colors resize-none"
              />
              <div className="absolute bottom-3 right-3 text-xs text-gray-400">
                {currentLength} / {maxLength}
              </div>
            </div>
          </div>

          {/* N√∫t ph√¢n t√≠ch b·∫±ng AI v√† √¥ output */}
          <div className="flex flex-col items-start space-y-4 mt-4">
            <button
              type="button"
              onClick={handleAnalyzeAI}
              disabled={isAnalyzing}
              className={`font-bold py-3 px-6 rounded-lg shadow transition-colors ${
                isAnalyzing
                  ? "bg-gray-400 text-white cursor-not-allowed"
                  : "bg-yellow-400 hover:bg-yellow-500 text-white"
              }`}
            >
              {isAnalyzing ? "ƒêang ph√¢n t√≠ch..." : "Ph√¢n t√≠ch b·∫±ng AI"}
            </button>
            
            {/* Error message */}
            {analysisError && (
              <div className="w-full p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
                {analysisError}
              </div>
            )}
            
            {/* Analysis result */}
            {analysisResult && (
              <div className="w-full min-h-[200px] border border-gray-200 rounded-lg bg-gray-50 p-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-3">K·∫øt qu·∫£ ph√¢n t√≠ch AI:</h3>
                <div className="text-gray-700 whitespace-pre-wrap text-sm leading-relaxed">
                  {analysisResult}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between items-center pt-8">
          <button
            onClick={handleBack}
            className="flex items-center gap-2 px-8 py-3 text-lg font-semibold text-gray-700 bg-white border border-gray-400 rounded-full hover:bg-gray-100 transition-colors"
          >
            <ArrowLeft size={20} />
            Quay L·∫°i
          </button>

          <button
            onClick={handleContinue}
            disabled={isCreatingCV}
            className={`flex items-center gap-2 px-8 py-3 text-lg font-semibold text-white rounded-full transition-colors ${isCreatingCV ? 'bg-gray-400 cursor-not-allowed' : 'bg-yellow-500 hover:bg-yellow-600'}`}
          >
            {isCreatingCV ? 'ƒêang x·ª≠ l√Ω...' : 'T·∫°o CV'}
            <ArrowRight size={20} />
          </button>
        </div>
      </div>
    </div>
  );
}
